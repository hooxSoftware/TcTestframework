<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="PRG_UnitTestLib" Id="{dbeace52-75a3-4dfa-9955-9febf020e88e}" SpecialFunc="None">
    <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_TestLibrary
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Dieser Baustein etnhält alle Testsuites und führt diese aus.

-------------------------------------------------------------------------------
Input
	i_bStart : mit positiver Flanke werden die registrierten Testsuites ausgeführt

Output
	o_eState  		: EState_t;
	o_eResult 		: EResult_t;
	o_sStatistic	: SStatistic_t;
******************************************************************************)
{attribute 'global_init_slot' := '41000'}
PROGRAM PRG_UnitTestLib
VAR_INPUT
	i_bStart : BOOL;
END_VAR
VAR_OUTPUT
	o_eState  		: EState_t;
	o_eResult 		: EResult_t;
	o_sStatistic	: SStatistic_t;
END_VAR
VAR
	a_pTestSuite 	: ARRAY [0..255] OF TestSuiteHandle_t;
	u16TestSuites 	: UINT;
	u16Index	  	: UINT;
	pActTestSuite 	: TestSuiteHandle_t;
	pTestReport		: POINTER TO FB_TestReportBase;
	eRetCode 		: ERetCode_t;

	fbSystemTime 	: FB_LocalSystemTime;
	
	fbLicense 		: FB_CheckLicense;
	
	
	fbCoverage 		: FB_CoverageFile;
	u16PouIdx  		: UINT;
	u16LineIdx 		: UINT;
	sCodeCoverage	: SCodeCoverage_t;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
	fbSystemTime(bEnable := TRUE, dwCycle := 5);

	fbCoverage();

	CASE o_eState OF 
	
	EState_t.eStateInit:	

		//IF checkLicense() = ERetCode_t.eRetDone THEN
			
			IF i_bStart = FALSE THEN 
				o_eState := EState_t.eStateIdle; 
			END_IF
			
		//END_IF;
	
	EState_t.eStateIdle:
	
		IF i_bStart = TRUE THEN
			logInfo('+++++++++++++ Testbeginn ++++++++++++++');
			o_eState := EState_t.eStatePrepare;
		END_IF
	
	EState_t.eStatePrepare:
	
		IF fbCoverage.open('C:\Users\Administrator\Desktop\TestResult\', 'Coverage.xml') = ERetCode_t.eRetDone THEN
			
			o_eResult 	  				:= EResult_t.eStatePassed;
			o_sStatistic.u32Executed 	:= 0;
			o_sStatistic.u32TestCases	:= 0;
			o_sStatistic.u32Asserts  	:= 0;
			o_sStatistic.u32Passed   	:= 0;
			o_sStatistic.u32Failed	 	:= 0;	
	
			pActTestSuite := getFirstTestSuite();
			
			IF pActTestSuite      <> 0   THEN
				o_eState := EState_t.eStateExecute;
			ELSE
				o_eState := EState_t.eStateError;	
			END_IF
			
		END_IF;
	
	EState_t.eStateExecute:
	
		pActTestSuite^(i_bStart := TRUE);
	
		IF pActTestSuite^.o_eState = EState_t.eStateReady THEN
			
			IF pActTestSuite^.o_eResult = EResult_t.eStateFailed THEN
				o_eResult := EResult_t.eStateFailed;
			END_IF
			
			pActTestSuite^(i_bStart := FALSE);
			
			o_eState := EState_t.eStateCleanUp;
			
			o_sStatistic.u32Executed 	:= o_sStatistic.u32Executed  + pActTestSuite^.getExecuted();
			o_sStatistic.u32TestCases	:= o_sStatistic.u32TestCases + pActTestSuite^.getNoOfTests(); 
			o_sStatistic.u32Asserts  	:= o_sStatistic.u32Asserts   + pActTestSuite^.getNoOfAsserts();
			o_sStatistic.u32Passed   	:= o_sStatistic.u32Passed    + pActTestSuite^.getPassed();
			o_sStatistic.u32Failed	 	:= o_sStatistic.u32Failed    + pActTestSuite^.getFailed();
		END_IF
	
	EState_t.eStateCleanUp:
	
		IF pActTestSuite^.o_eResult = EResult_t.eStateFailedFatal THEN
			o_eResult := EResult_t.eStateFailedFatal;
			o_eState  := EState_t.eStateBuildCoverageFile;
		ELSE
			
			pActTestSuite := getNextTestSuite();
						
			IF pActTestSuite <> 0 THEN
				o_eState := EState_t.eStateExecute;
			ELSE
				o_eState := EState_t.eStateBuildCoverageFile;
				logInfo('+++++++++++++ Test Ende ++++++++++++++');
			END_IF		
			
		END_IF

	EState_t.eStateBuildCoverageFile:

		IF fbCoverage.o_bOpen THEN

			fbCoverage.addString('<Result>');
			fbCoverage.addCrlf();

			FOR u16PouIdx := 1 TO sCodeCoverage.u16MaxIndex DO

				fbCoverage.addString('<POU Id="');
				fbCoverage.addValue(u16PouIdx);
				fbCoverage.addString('">');
				fbCoverage.addCrlf();

				FOR u16LineIdx := 1 TO 1000 DO

					IF sCodeCoverage.aPou[u16PouIdx][u16LineIdx] > 0 THEN

						fbCoverage.addString('<Line Nb="');
						fbCoverage.addValue(u16LineIdx);

						fbCoverage.addString('" Count="');
						fbCoverage.addValue(sCodeCoverage.aPou[u16PouIdx][u16LineIdx]);
						
						fbCoverage.addString('"/>');
						fbCoverage.addCrlf();

					END_IF;

				END_FOR;

				fbCoverage.addString('</POU>');
				fbCoverage.addCrlf();

			END_FOR;

			fbCoverage.addString('</Result>');
			fbCoverage.addCrlf();
		
		END_IF;	

		o_eState := EState_t.eStateReady;
	
	EState_t.eStateReady:

		IF fbCoverage.o_bOpen  = TRUE AND 
		   fbCoverage.o_bEmpty = TRUE THEN
			fbCoverage.close();
		END_IF;
		
		IF i_bStart = FALSE THEN
			o_eState := EState_t.eStateExport;
		END_IF

	EState_t.eStateExport:

		IF pTestReport <> 0 THEN
			
			eRetCode := pTestReport^.create();
			
			CASE eRetCode OF

			 ERetCode_t.eRetDone :
				o_eState := EState_t.eStateIdle;
			
			ERetCode_t.eRetFailed :
				o_eState := EState_t.eStateError;
				
			END_CASE;			
			
		ELSE
			o_eState := EState_t.eStateIdle;
		END_IF;

	EState_t.eStateError:
	EState_t.eStateLicenseError:
	
	END_CASE]]></ST>
    </Implementation>
    <Method Name="addTestReport" Id="{01e7f184-904d-4319-bf24-cb63b7c8dbc8}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.addTestReport
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_pTestReport

Output
-
******************************************************************************)
METHOD PUBLIC addTestReport : BOOL
VAR_INPUT
	i_pTestReport : TestReportHandle_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	pTestReport := i_pTestReport;]]></ST>
      </Implementation>
    </Method>
    <Method Name="addTestSuite" Id="{4899b7f4-5457-4c86-b63d-9b10a5e33440}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.addTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_pTestSuite

Output
-
******************************************************************************)
METHOD PUBLIC addTestSuite : BOOL
VAR_INPUT
	i_pTestSuite : TestSuiteHandle_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	addTestSuite := FALSE;

	IF 	i_pTestSuite  <> 0   AND 
		u16TestSuites <  255 THEN
		
		a_pTestSuite[u16TestSuites] := i_pTestSuite;
		
		u16TestSuites := u16TestSuites +1;
	
		o_sStatistic.u32TestSuites := o_sStatistic.u32TestSuites + 1;
		o_sStatistic.u32TestCases  := o_sStatistic.u32TestCases + i_pTestSuite^.sStatistic.u32TestCases;
		
		addTestSuite := TRUE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkLicense" Id="{4a84bc62-8e71-4e6c-af93-ad6435b19559}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.checkLicense
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD checkLicense : ERetCode_t
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	checkLicense := ERetCode_t.eRetBusy;
	
	fbLicense(bExecute    := TRUE, 
		  stLicenseId := STRING_TO_GUID('994D9F0C-F802-4000-8582-229354A3CA39'));
			  
	IF fbLicense.bBusy =  FALSE THEN
		IF fbLicense.stCheckLicense.eResult = E_LHR_LicenseOK THEN
			checkLicense := ERetCode_t.eRetDone;
		ELSE
			checkLicense := ERetCode_t.eRetFailed;	
		END_IF
	END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getFirstTestSuite" Id="{6dd3fe68-4fa4-401b-93b4-4e9d66a75960}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getFirstTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD PRIVATE getFirstTestSuite : TestSuiteHandle_t
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	u16Index := 0;
	getFirstTestSuite := a_pTestSuite[0];]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNextTestSuite" Id="{25155ea4-e257-4500-9294-2e5b075f342b}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getNextTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD PRIVATE getNextTestSuite : TestSuiteHandle_t
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	getNextTestSuite := 0;
	u16Index 		 := u16Index + 1;

	IF u16Index < u16TestSuites THEN
		getNextTestSuite := a_pTestSuite[u16Index];
	END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getTime" Id="{04976903-c590-4bd7-9b55-bd9bdde13ab5}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getTime
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD getTime : TimeStruct
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	getTime := fbSystemTime.systemTime;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LineCovered" Id="{9bc155ab-6ca6-4d1c-a73e-4da1bd4ba034}">
      <Declaration><![CDATA[METHOD PUBLIC LineCovered : BOOL
VAR_INPUT
	u16Pou  : UINT;
	u16Line : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	LineCovered := TRUE;
	
	IF o_eState = EState_t.eStateExecute THEN

		IF (u16Pou  > 0 AND u16Pou  <= 2000) AND
           (u16Line > 0 AND u16Line <= 1000) THEN

			IF u16Pou > sCodeCoverage.u16MaxIndex THEN
				sCodeCoverage.u16MaxIndex := u16Pou;
			END_IF;

			IF sCodeCoverage.aPou[u16Pou][u16Line] < 255 THEN
				sCodeCoverage.aPou[u16Pou][u16Line] := sCodeCoverage.aPou[u16Pou][u16Line]+1;
			END_IF;
		END_IF;

	END_IF;
	
	
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="logError" Id="{9690f9c4-e79c-461f-b5e8-03d0cd8a943f}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.logError
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_strMessage

Output
-
******************************************************************************)
METHOD PROTECTED logError : BOOL
VAR_INPUT
	i_strMessage : StrMessage_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	ADSLOGSTR(msgCtrlMask 	:= ADSLOG_MSGTYPE_ERROR , 
			  msgFmtStr 	:= i_strMessage, 
			  strArg 		:= '');]]></ST>
      </Implementation>
    </Method>
    <Method Name="logInfo" Id="{8bbf780e-46b8-44f0-9d7d-eeee4895fdf7}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.logInfo
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_strMessage

Output
-
******************************************************************************)
METHOD PROTECTED logInfo : BOOL
VAR_INPUT
	i_strMessage : StrMessage_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	ADSLOGSTR(msgCtrlMask 	:= ADSLOG_MSGTYPE_HINT , 
			  msgFmtStr 	:= i_strMessage, 
			  strArg 		:= '');]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_UnitTestLib">
      <LineId Id="257" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="251" Count="3" />
      <LineId Id="115" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="64" Count="3" />
      <LineId Id="108" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="175" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="102" Count="5" />
      <LineId Id="220" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="491" Count="1" />
      <LineId Id="535" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="512" Count="2" />
      <LineId Id="522" Count="1" />
      <LineId Id="515" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="430" Count="1" />
      <LineId Id="89" Count="2" />
      <LineId Id="223" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="247" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="43" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.addTestReport">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.addTestSuite">
      <LineId Id="7" Count="9" />
      <LineId Id="41" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.checkLicense">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.getFirstTestSuite">
      <LineId Id="25" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.getNextTestSuite">
      <LineId Id="25" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.getTime">
      <LineId Id="21" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.LineCovered">
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.logError">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="PRG_UnitTestLib.logInfo">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>