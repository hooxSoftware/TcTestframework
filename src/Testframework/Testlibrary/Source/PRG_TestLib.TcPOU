<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_TestLib" Id="{dbeace52-75a3-4dfa-9955-9febf020e88e}" SpecialFunc="None">
    <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_TestLibrary
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Dieser Baustein etnhält alle Testsuites und führt diese aus.

-------------------------------------------------------------------------------
Input
	i_bStart : mit positiver Flanke werden die registrierten Testsuites ausgeführt

Output
	o_eState  		: EState_t;
	o_eResult 		: EResult_t;
	o_sStatistic	: SStatistic_t;
******************************************************************************)
{attribute 'global_init_slot' := '41000'}
PROGRAM PRG_TestLib
VAR_INPUT
	i_bStart : BOOL;
END_VAR
VAR_OUTPUT
	o_eState  		: EState_t;
	o_eResult 		: EResult_t;
	o_sStatistic	: SStatistic_t;
END_VAR
VAR
	bHwStart AT %I* : BOOL;
	bHwBusy  AT %Q* : BOOL;
	bHwReady AT %Q* : BOOL;
	
	a_iTestSuite 	: ARRAY [0..255] OF ITestSuite_t;
	u16TestSuites 	: UINT;
	u16Index	  	: UINT;
	iActTestSuite 	: ITestSuite_t;
	pTestReport		: POINTER TO FB_TestReportBase;
	eRetCode 		: ERetCode_t;

	fbSystemTime 	: FB_LocalSystemTime;
	
	fbUnittest 		: FB_CoverageFile;
	u16ReportState  : UINT;
	u16TestSuitIdx	: UINT;
	iTestCase  		: ITestBase_t;
	sTempResult     : SStatistic_t;
END_VAR
VAR CONSTANT 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
	fbSystemTime(bEnable := TRUE, dwCycle := 5);
			
	fbUnittest();

	CASE o_eState OF 
	
	EState_t.eStateInit:	
		
		IF i_bStart = FALSE THEN 
		   logInfo('Testlib V2.2.1 Ready');
			o_eState := EState_t.eStateIdle; 
		END_IF

	EState_t.eStateIdle:
	
		IF i_bStart = TRUE OR bHwStart = TRUE THEN
			logInfo('+++++++++++++ Testbeginn ++++++++++++++');
			o_eState := EState_t.eStatePrepare;
			bHwReady := FALSE;
		END_IF
	
	EState_t.eStatePrepare:
	
		bHwBusy := TRUE;
		
		o_eResult 	  					:= EResult_t.eStatePassed;
		o_sStatistic.u32Executed 	:= 0;
		o_sStatistic.u32TestCases	:= 0;
		o_sStatistic.u32Asserts  	:= 0;
		o_sStatistic.u32Passed   	:= 0;
		o_sStatistic.u32Failed	 	:= 0;	

		iActTestSuite := getFirstTestSuite();
		
		IF iActTestSuite      <> 0   THEN
			o_eState := EState_t.eStateExecute;
		ELSE
			o_eState := EState_t.eStateError;	
		END_IF
	
	EState_t.eStateExecute:
	
		iActTestSuite.execute(i_bStart := TRUE);
	
		IF iActTestSuite.getState() = EState_t.eStateReady THEN
			
			IF iActTestSuite.getResult() = EResult_t.eStateFailed THEN
				o_eResult := EResult_t.eStateFailed;
			END_IF
			
			iActTestSuite.execute(i_bStart := FALSE);
			sTempResult := iActTestSuite.Result;

			o_eState := EState_t.eStateCleanUp;

			o_sStatistic.u32Executed 	:= o_sStatistic.u32Executed  + sTempResult.u32Executed;
			o_sStatistic.u32TestCases	:= o_sStatistic.u32TestCases + sTempResult.u32TestCases; 
			o_sStatistic.u32Asserts  	:= o_sStatistic.u32Asserts   + sTempResult.u32Asserts;
			o_sStatistic.u32Passed   	:= o_sStatistic.u32Passed    + sTempResult.u32Passed;
			o_sStatistic.u32Failed	 	:= o_sStatistic.u32Failed    + sTempResult.u32Failed;
		END_IF
	
	EState_t.eStateCleanUp:
	
		IF iActTestSuite.getResult() = EResult_t.eStateFailedFatal THEN
			o_eResult := EResult_t.eStateFailedFatal;
			o_eState  := EState_t.eStateExport;
			logInfo('+++++++++++++ Fatal Error : Test Ende ++++++++++++++');
		ELSE
			
			iActTestSuite := getNextTestSuite();
						
			IF iActTestSuite <> 0 THEN
				o_eState := EState_t.eStateExecute;
			ELSE
				o_eState := EState_t.eStateExport;
				logInfo('+++++++++++++ Test Ende ++++++++++++++');
			END_IF		
			
		END_IF

	EState_t.eStateExport:

		IF createReport(EReporttype_t.eExternalReport) = ERetCode_t.eRetDone THEN
			o_eState := EState_t.eStateBuildUnitTestFile;
		END_IF;
		
	EState_t.eStateBuildUnitTestFile:

		IF createReport(EReporttype_t.eUnitTestReport) = ERetCode_t.eRetDone THEN
			o_eState := EState_t.eStateReady;
		END_IF;
		
	EState_t.eStateReady:

		bHwReady := TRUE;
		bHwBusy  := FALSE;
		IF i_bStart  = FALSE AND 
			bHwStart = FALSE THEN
			o_eState := EState_t.eStateIdle;
		END_IF		
		
	EState_t.eStateError,
	EState_t.eStateLicenseError:
	
		bHwBusy  := FALSE;
		o_eState := EState_t.eStateError;

	END_CASE]]></ST>
    </Implementation>
    <Method Name="addTestReport" Id="{01e7f184-904d-4319-bf24-cb63b7c8dbc8}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.addTestReport
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_pTestReport

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PUBLIC addTestReport : BOOL
VAR_INPUT
	i_pTestReport : TestReportHandle_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	pTestReport := i_pTestReport;]]></ST>
      </Implementation>
    </Method>
    <Method Name="addTestSuite" Id="{4899b7f4-5457-4c86-b63d-9b10a5e33440}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.addTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_pTestSuite

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PUBLIC addTestSuite : BOOL
VAR_INPUT
	i_iTestSuite : ITestSuite_t;
END_VAR
VAR
    sStatistic : SStatistic_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	addTestSuite := FALSE;

	IF 	i_iTestSuite  <> 0   AND 
		u16TestSuites <  255 THEN
		
		a_iTestSuite[u16TestSuites] := i_iTestSuite;
		sStatistic      := i_iTestSuite.Result;
		u16TestSuites   := u16TestSuites +1;
	
		o_sStatistic.u32TestSuites := o_sStatistic.u32TestSuites + 1;
		o_sStatistic.u32TestCases  := o_sStatistic.u32TestCases + sStatistic.u32TestCases;
		
		addTestSuite := TRUE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="createReport" Id="{d9afc7ed-2e81-46b0-adaa-c3b998a94e06}">
      <Declaration><![CDATA[{attribute 'hide'} 
METHOD PRIVATE createReport : ERetCode_t
VAR_INPUT
	i_eReporttype : EReportType_t;
END_VAR
VAR
	eRetcode    : ERetCode_t;
	u32Temp     : UDINT;
    sTestResult : STestcase_t;
    sStatistic  : SStatistic_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	createReport := ERetCode_t.eRetBusy;

	CASE u16ReportState OF

	0: 
		IF i_eReporttype = EReportType_t.eUnitTestReport THEN
			u16ReportState := 20;
		END_IF;

		IF i_eReporttype = EReportType_t.eExternalReport THEN
			u16ReportState := 100;
		END_IF;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Export Unittest Ergebnisse
// 
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	20:		

		eRetcode := fbUnitTest.open('C:\TwinCAT\3.1\Boot\CurrentConfig\', 'Unittest.xml');

		IF eRetcode = ERetCode_t.eRetDone THEN

			u16ReportState := 21;

		ELSIF eRetcode = ERetCode_t.eRetFailed THEN

			logError('createReport Unittest.xml : Datei nicht geöffnet');
			u16ReportState := 22;

		END_IF;	

	21:

		u16TestSuitIdx := 0;

		fbUnitTest.addString('<?xml version="1.0" ?>');
		fbUnitTest.addCrlf();

		iActTestSuite := getFirstTestSuite();
		fbUnitTest.addString('<testsuites>');
		fbUnitTest.addCrlf();

		WHILE (iActTestSuite <> 0) DO

            sStatistic := iActTestSuite.Result;
			u16TestSuitIdx := u16TestSuitIdx+1;

			fbUnitTest.addString('<testsuite');
			fbUnitTest.addString(' name="');
			fbUnitTest.addString(iActTestSuite.getId());
			fbUnitTest.addString('" tests="');			
			fbUnitTest.addValue(sStatistic.u32TestCases);
			fbUnitTest.addString('" disabled="');
            u32Temp := sStatistic.u32TestCases-sStatistic.u32Executed;
			fbUnitTest.addValue(u32Temp);
			fbUnitTest.addString('" errors="');
			fbUnitTest.addValue(u32Temp);
			fbUnitTest.addString('" failures="');
			fbUnitTest.addValue(sStatistic.u32Failed);
			fbUnitTest.addString('" hostname="');
			fbUnitTest.addString('" id="');
			fbUnitTest.addvalue(u16TestSuitIdx);
			fbUnitTest.addString('" package="');
			fbUnitTest.addString(iActTestSuite.getPath());
			fbUnitTest.addString('">');
			fbUnitTest.addCrlf();

			iTestCase := iActTestSuite.getFirstTestCase();

			WHILE (iTestCase <> 0) DO
        
                sTestResult := iTestCase.Result;

				fbUnitTest.addString('<testcase');
				fbUnitTest.addString(' name="');
				fbUnitTest.addString(iTestCase.getId());
				fbUnitTest.addString('" assertions="');
                u32Temp := sTestResult.u32Failed + sTestResult.u32Passed;
				fbUnitTest.addValue(u32Temp);
				fbUnitTest.addString('" classname="');
				fbUnitTest.addString(iTestCase.getPath());
                fbUnitTest.addString('.');
				fbUnitTest.addString(iTestCase.getClassName());
				fbUnitTest.addString('" time="');				
				fbUnitTest.addTimeMs(sTestResult.u32Time);
				fbUnitTest.addString('">');
				fbUnitTest.addCrlf();

				CASE sTestResult.eState OF

				EResult_t.eStatePassed :

					fbUnitTest.addString('<passed/>');

				EResult_t.eStateFailed, 
				EResult_t.eStateFailedFatal :
			
					fbUnitTest.addString('<failure');
					fbUnitTest.addString(' message="');
					fbUnitTest.addString(iTestCase.getMessage());
					fbUnitTest.addString('"/>');
					
				EResult_t.eStateSkipped:

					fbUnitTest.addString('<skipped/>');

				END_CASE;
				
				fbUnitTest.addCrlf();	

				fbUnitTest.addString('</testcase>');
				fbUnitTest.addCrlf();		

				iTestCase := iActTestSuite.getNextTestCase();
		
			END_WHILE

			fbUnitTest.addString('</testsuite>');
			fbUnitTest.addCrlf();	

			iActTestSuite := getNextTestSuite();

		END_WHILE

		fbUnitTest.addString('</testsuites>');
		fbUnitTest.addCrlf();

		u16ReportState := 22;

	22:
		IF fbUnitTest.o_bOpen  = TRUE AND 
		   fbUnitTest.o_bEmpty = TRUE THEN
			fbUnitTest.close();
		END_IF;

		IF fbUnitTest.o_bOpen  = FALSE THEN
			createReport 	:= ERetCode_t.eRetDone;
		END_IF;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
// 
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	100:

		IF pTestReport <> 0 THEN
			
			createReport := pTestReport^.create();		
			
		ELSE

			createReport := ERetCode_t.eRetDone;

		END_IF;

	ELSE
		createReport := ERetCode_t.eRetFailed;
	END_CASE;

	IF createReport = ERetCode_t.eRetDone THEN
		u16ReportState := 0;
	END_IF;
















(**)]]></ST>
      </Implementation>
    </Method>
    <Method Name="getFirstTestSuite" Id="{6dd3fe68-4fa4-401b-93b4-4e9d66a75960}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getFirstTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PRIVATE getFirstTestSuite : ITestSuite_t
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	u16Index := 0;
	getFirstTestSuite := a_iTestSuite[0];]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNextTestSuite" Id="{25155ea4-e257-4500-9294-2e5b075f342b}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getNextTestSuite
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PRIVATE getNextTestSuite : ITestSuite_t
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	getNextTestSuite := 0;
	u16Index 		 := u16Index + 1;

	IF u16Index < u16TestSuites THEN
		getNextTestSuite := a_iTestSuite[u16Index];
	END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getTime" Id="{04976903-c590-4bd7-9b55-bd9bdde13ab5}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.getTime
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD getTime : TimeStruct
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	getTime := fbSystemTime.systemTime;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="logError" Id="{9690f9c4-e79c-461f-b5e8-03d0cd8a943f}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.logError
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_strMessage

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PROTECTED logError : BOOL
VAR_INPUT
	i_strMessage : StrMessage_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	ADSLOGSTR(msgCtrlMask 	:= ADSLOG_MSGTYPE_ERROR , 
			  msgFmtStr 	:= i_strMessage, 
			  strArg 		:= '');]]></ST>
      </Implementation>
    </Method>
    <Method Name="logInfo" Id="{8bbf780e-46b8-44f0-9d7d-eeee4895fdf7}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: PRG_UnitTestLib.logInfo
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode

-------------------------------------------------------------------------------
Input
i_strMessage

Output
-
******************************************************************************)
{attribute 'hide'} 
METHOD PUBLIC logInfo : BOOL
VAR_INPUT
	i_strMessage : StrMessage_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	ADSLOGSTR(msgCtrlMask 	:= ADSLOG_MSGTYPE_HINT , 
			  msgFmtStr 	:= i_strMessage, 
			  strArg 		:= '');]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>