<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_Test_Base_Not" Id="{fcf08a4b-84b3-4de6-9021-24a73f13f2bf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Test_Base_Not EXTENDS FB_UnitTestBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="cleanup" Id="{65da6c5b-32cd-49b2-8efb-d7e2ddbdaf15}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: FB_Test_Base_Not.cleanup
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode...

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD PUBLIC cleanup : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	cleanup := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="execute" Id="{787a6e5e-98af-47ae-8dc1-33d98cab30ec}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: FB_Test_Base_Not.execute
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode...

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD PUBLIC execute : BOOL
VAR_INPUT
END_VAR
VAR
	bValue1   : ARRAY[0..10] OF BOOL;
	bValue2   : ARRAY[0..10] OF BOOL;
	s8Value1  : ARRAY[0..10] OF SINT;
	s8Value2  : ARRAY[0..10] OF SINT;
	u8Value1  : ARRAY[0..10] OF USINT;
	u8Value2  : ARRAY[0..10] OF USINT;	
	s16Value1 : ARRAY[0..10] OF INT;
	s16Value2 : ARRAY[0..10] OF INT;
	u16Value1 : ARRAY[0..10] OF UINT;
	u16Value2 : ARRAY[0..10] OF UINT;		
	s32Value1 : ARRAY[0..10] OF DINT;
	s32Value2 : ARRAY[0..10] OF DINT;
	u32Value1 : ARRAY[0..10] OF UDINT;
	u32Value2 : ARRAY[0..10] OF UDINT;	
	r32Value1 : ARRAY[0..10] OF REAL;
	r32Value2 : ARRAY[0..10] OF REAL;
	r64Value1 : ARRAY[0..10] OF LREAL;
	r64Value2 : ARRAY[0..10] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

	bValue1[0] := FALSE;
	bValue2[0] := TRUE;
	
	setMessage('Teste Datentyp BOOL');
	assertNotEQUAL(bValue1[0], bValue2[0]);
	
	setMessage('Teste Datentyp Array of BOOL');
	assertNotEQUAL(bValue1, bValue2);

(**********************************************) 
	
	s8Value1[0] := 31;
	s8Value2[0] := 32;
	
	setMessage('Teste Datentyp SINT');
	assertNotEQUAL(s8Value1[0], s8Value2[0]);

	setMessage('Teste Datentyp Array SINT');
	assertNotEQUAL(s8Value1, s8Value2);
(**********************************************) 	

	u8Value1[0] := 1;
	u8Value2[0] := 34;
	
	setMessage('Teste Datentyp USINT');
	assertNotEQUAL(u8Value1[0], u8Value2[0]);

	setMessage('Teste Datentyp Array of USINT');
	assertNotEQUAL(u8Value1, u8Value2);
(**********************************************) 	
	
	s16Value1[0] := 1323;
	s16Value2[0] := 4324;
	
	setMessage('Teste Datentyp INT');
	assertNotEQUAL(s16Value1[0], s16Value2[0]);

	setMessage('Teste Datentyp Array of INT');
	assertNotEQUAL(s16Value1, s16Value2);
(**********************************************) 	

	u16Value1[0] := 3124;
	u16Value2[0] := 4232;
	
	setMessage('Teste Datentyp UINT');
	assertNotEQUAL(u16Value1[0] , u16Value2[0] );

	setMessage('Teste Datentyp Array of UINT');
	assertNotEQUAL(u16Value1 , u16Value2);
(**********************************************) 	

	s32Value1[0] := 1244;
	s32Value2[0] := 1593;
	
	setMessage('Teste Datentyp DINT');
	assertNotEQUAL(s32Value1[0], s32Value2[0]);

	setMessage('Teste Datentyp Array of DINT');
	assertNotEQUAL(s32Value1, s32Value2);
(**********************************************) 	

	u32Value1[0] := 4344;
	u32Value2[0] := 3424;
	
	setMessage('Teste Datentyp UDINT');
	assertNotEQUAL(u32Value1[0], u32Value2[0]);

	setMessage('Teste Datentyp Array of UDINT');
	assertNotEQUAL(u32Value1, u32Value2);
(**********************************************) 	

	r32Value1[0] := 133.53245;
	r32Value2[0] := 5345.53245;
	
	setMessage('Teste Datentyp REAL');
	assertNotEQUAL(r32Value1[0], r32Value2[0]);

	setMessage('Teste Datentyp Array of REAL');
	assertNotEQUAL(r32Value1, r32Value2);
(**********************************************) 	

	r64Value1[0] := 1232.53325;
	r64Value2[0] := 1345.53325;

	setMessage('Teste Datentyp LREAL');
	assertNotEQUAL(r64Value1[0], r64Value2[0]);

	setMessage('Teste Datentyp Array of LREAL');
	assertNotEQUAL(r64Value1, r64Value2);

(**********************************************) 		
	execute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="prepare" Id="{6212eda2-4fb6-4cf5-a93a-1b3be7bda95e}">
      <Declaration><![CDATA[(******************************************************************************
Baustein: FB_Test_Base_Not.prepare
Spezifikation: doc/Spezifikation.pdf, Kap. x.y.z
-------------------------------------------------------------------------------
erstellt:
von:
Geändert:
von:
-------------------------------------------------------------------------------
Beschreibung
Diese Methode...

-------------------------------------------------------------------------------
Input
-

Output
-
******************************************************************************)
METHOD PUBLIC prepare : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	prepare := true;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Test_Base_Not">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Test_Base_Not.cleanup">
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Test_Base_Not.execute">
      <LineId Id="133" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="186" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="190" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Test_Base_Not.prepare">
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>